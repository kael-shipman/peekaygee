#!/bin/bash

set -e


CONFFILE_NAME="peekaygee.json"
SELF="$(basename "$0")"


function echo_push_usage() {
    echo
    echo "SYNOPSIS"
    echo "      $SELF [remote]"
    echo
    echo "DESCRIPTION"
    echo "      Push one or more packages (found using global and repo-specific config files)"
    echo "      to the given remote archive."
    echo
    echo "OPTIONS"
    echo "      -h|--help"
    echo "          Show this help text."
    echo
    echo
}


# Loop to gather options
if [ -z "$VERBOSITY" ]; then VERBOSITY=0; fi
while [ "$#" -gt 0 ]; do
    case "$1" in
        -h|--help)
            echo_push_usage
            exit
        ;;

        -q) VERBOSITY=-1; shift ;;
        -v) !((VERBOSITY++)); shift ;;
        -vv) VERBOSITY=2; shift ;;
        -vvv) VERBOSITY=3; shift ;;

        --version)
            echo
            echo "$SELF version $PKG_VERSION"
            echo
            echo "See readme and license information, file bug reports, and view source code at"
            echo "https://github.com/kael-shipman/peekaygee"
            echo
            exit
        ;;

        *)
            if [ -z "$REMOTE" ]; then
                REMOTE="$1"
                shift
            else
                >&2 echo_push_usage
                >&2 echo
                >&2 echo "E: You've passed an invalid command or option: $1"
                >&2 echo
                exit 6
            fi
        ;;
    esac
done
export VERBOSITY

# Rework verbosity for sub-command
v=
i="$VERBOSITY"
while [ "$i" -gt 0 ]; do
    if [ -z "$v" ]; then
        v="-"
    fi
    v="${v}v"
    !((i--))
done
if [ "$VERBOSITY" -eq -1 ]; then
    v="-q"
fi


# Load libraries

# Load libpeekaygee
if [ -z "$D" ]; then
    D="$(dirname "$(readlink -f "$0")")"
    for libdir in "$D/../lib/peekaygee" "$PEEKAYGEE_LIBDIR" /usr/lib/peekaygee; do
        if [ -e "$libdir/libpeekaygee.sh" ]; then
            . "$libdir/libpeekaygee.sh"
            lib_loaded=true
            break
        fi
    done
fi
if [ "$lib_loaded" != "true" ]; then
    >&2 echo
    >&2 echo "E: Couldn't find peekaygee libraries! Are you sure you've installed"
    >&2 echo "   peekaygee correctly?"
    >&2 echo
    exit 5
fi

# Load librexec
if [ "$lib_rexec_loaded" != "true" ]; then
    say 1 "Loading librexec"
    if [ -z "$LIBREXEC_DIR" ]; then 
        say 1 "LIBREXEC_DIR not set. Setting..."
        LIBREXEC_DIR="$(readlink -f "$(dirname "$(readlink -f "$0")")/../../ks-std-libs/src/usr/lib/ks-std-libs")" \
        || \
        LIBREXEC_DIR=
        say 2 "LIBREXEC_DIR set to '$LIBREXEC_DIR'"
    fi
    for libdir in "$LIBREXEC_DIR" /usr/lib/ks-std-libs; do
        say 3 "Checking for librexec at '$libdir/librexec.sh'"
        if [ -e "$libdir/librexec.sh" ]; then
            say 3 "Found. Loading librexec"
            . "$libdir/librexec.sh"
            lib_rexec_loaded="true"
            break
        else
            say 3 "Not found."
        fi
    done

    if [ "$lib_rexec_loaded" != "true" ]; then
        >&2 echo
        >&2 echo "E: Couldn't find librexec! Make sure you install librexec before proceeding. (Note: you"
        >&2 echo "   can set the directory to search for librexec using the \`LIBREXEC_DIR\` environment"
        >&2 echo "   variable.)"
        >&2 echo
        exit 10
    else
        say 1 "librexec loaded"
    fi
else
    say 1 "librexec already loaded"
fi


# Validate config
require_config
check_config


# If no REMOTE passed, see if we can get a default
if [ -z "$REMOTE" ]; then
    say 1 "No remote defined. Looking for default."
    if [ "$(config_jq -j '.remotes | length')" -eq 1 ]; then
        REMOTE="$(config_jq -jc '.remotes | keys | first')"
        say 2 "Only 1 remote defined. Using that ('$REMOTE')"
    elif config_jq -e '.["default-remote"]' >/dev/null; then
        REMOTE="$(config_jq -jc '.["default-remote"]')"
        say 2 "More than one remote defined, but 'default-remote' defined. Using that ('$REMOTE')"
    else
        >&2 echo_push_usage
        >&2 echo
        >&2 echo "E: You haven't passed a remote or defined 'default-remote', and there's more than one remote defined."
        >&2 echo
        exit 7
    fi
fi

# Make sure remote exists
if ! config_jq -e '.remotes."'$REMOTE'"' >/dev/null; then
    >&2 echo_push_usage
    >&2 echo
    >&2 echo "E: '$REMOTE' does not appear to be a configured remote. (Checked in config"
    >&2 echo "   files $(find_config_files))"
    >&2 echo
    exit 8
else
    say 1 "Remote '$REMOTE' exists in config"
fi
REMOTE_PATH="$(config_jq -j '.remotes."'$REMOTE'".url')"


say 0 "Attempting to push packages to '$REMOTE'"
say 0

say 2 "Remote path: '$REMOTE_PATH'"

# Make sure peekaygee-archive is installed
if ! rexec "$REMOTE_PATH" "command -v peekaygee-archive &>/dev/null"; then
    >&2 echo
    >&2 echo "E: It doesn't look like the remote '$REMOTE' has peekaygee-archive installed. Please"
    >&2 echo "   install peekaygee-archive on the remote before continuing."
    >&2 echo
    exit 11
else
    say 1 "peekaygee-archive is installed on remote '$REMOTE'"
fi

# Make sure archive is initialized
say 2 "Initializing archive on remote '$REMOTE'"
if ! rexec -t "$REMOTE_PATH" "peekaygee-archive $v init \"::path::\""; then
    >&2 echo
    >&2 echo "E: Couldn't initialize '$REMOTE_PATH'. Can't continue."
    >&2 echo
    exit 12
else
    say 2 "Remote initialized"
fi


# All good now. Find packages, verify acceptability, and push to remote.

SEARCH_DIRS="$(config_jq -j '."build-dirs" | join("\u001e")')"
if [ -z "$SEARCH_DIRS" ]; then
    >&2 echo
    >&2 echo "E: You must specify a 'build-dirs' key in your config that contains an array of build directories"
    >&2 echo "   to search for packages."
    >&2 echo
    exit 9
else
    say 3 "Search dirs: '$(echo "$SEARCH_DIRS" | tr $'\x1e' ' ')'"
fi

PRESERVE_PUSHED="$(config_jq -j '."preserve-pushed"')"
if [ "$PRESERVE_PUSHED" != "true" ]; then
    say 3 "Preserve pushed (raw value): $PRESERVE_PUSHED"
    PRESERVE_PUSHED="false"
fi
say 2 "Preserve pushed packages: $PRESERVE_PUSHED"

PKGCNT=0
ERRORS=0
while read -u9 -r -d $'\x1e' prf || [[ $prf ]]; do
    say 1 "Processing package profile '$prf'"
    prfconf="$(config_jq ".packages.\"$prf\"")"

    # Accepting null allows us to unset previously set package profiles
    if [ "$prfconf" == "null" ]; then
        say 2 "Profile '$prf' has been overridden with 'null'. Skipping."
        continue
    fi

    say 2 "Profile '$prf': $prfconf"

    # Set other variables
    TYPE="$(echo "$prfconf" | jq -j '.type')"
    MATCH="$(echo "$prfconf" | jq -j '.match')"
    VISIBILITY="$(echo "$prfconf" | jq -j '.visibility')"
    OPTIONS="$(echo "$prfconf" | jq -jc '.options')"
    REMOTE_OPTIONS="$(config_jq -jc '.remotes."'$REMOTE'"."package-opts"')"

    # Default to "public" visibility, but verify value
    if [ "$VISIBILITY" == "null" ]; then
        say 3 "Visibility null; defaulting to 'public'"
        VISIBILITY=public
    elif [ "$VISIBILITY" != "public" ] && [ "$VISIBILITY" != "private" ]; then
        >&2 echo
        >&2 echo "E: Unrecognized visibility: '$VISIBILITY'. Should be 'public' or 'private'. Skipping"
        >&2 echo "   $prf files."
        >&2 echo
        !((ERRORS++))
        continue
    fi

    # Combine OPTIONS and REMOTE_OPTIONS
    if [ "$OPTIONS" == "null" ]; then OPTIONS="{}"; fi
    if [ "$REMOTE_OPTIONS" == "null" ]; then REMOTE_OPTIONS="{}"; fi
    OPTIONS="$(echo "[$OPTIONS, $REMOTE_OPTIONS]" | jq -c '.[0] * .[1]')"
    if [ "$OPTIONS" == "null" ]; then OPTIONS=""; fi


    # Search build dirs for matching packages
    PKGS=
    say 2 "Searching for packages...." 
    for d in "$SEARCH_DIRS"; do
        if [ ! -d "$d" ]; then
            >&2 echo "W: Search directory '$d' is not a directory. Skipping...."
            continue
        fi
        while read pkg; do
            say 3 "Adding package '$pkg' to list"
            PKGS="${PKGS}$pkg"$'\x1e'
        done < <(find "$d" -type f | egrep "$MATCH")
    done

    say 2
    say 2 "Ready to push packages"
    say 2
    say 2 "Type: $TYPE"
    say 2 "Match: $MATCH"
    say 2 "Visibility: $VISIBILITY"
    say 2 "Options: $OPTIONS"
    say 2 "Packages: $(echo "$PKGS" | tr $'\x1e' ' ')"
    say 2

    # Make sure there are packages to push
    if [ -z "$PKGS" ]; then
        say 1 "W: No packages found for type '$TYPE'"
        continue
    fi

    # Make sure the remote supports this type of package
    say 3 "Checking remote for support or '$TYPE' packages"
    if ! rexec "$REMOTE_PATH" "peekaygee-archive $v supports '$TYPE'" >/dev/null; then
        >&2 echo
        >&2 echo "E: Remote '$REMOTE' doesn't support archive type '$TYPE'. Skipping the following packages:"
        >&2 echo
        >&2 echo "   $(echo "$PKGS" | sed 's/'$'\x1e''/\n   /g')"
        >&2 echo
        !((ERRORS++))
        continue
    else
        say 2 "Remote supports package type '$TYPE'"
    fi

    # Push each package up, creating an options file for it also, if applicable
    while read -u10 -r -d $'\x1e' pkg; do
        success="true"
        say 0 "   - pushing '$pkg' to $VISIBILITY archive..."
        if ! rsync -u "$pkg" "$REMOTE_PATH/incoming/$VISIBILITY/"; then
            success="false"
            >&2 echo
            >&2 echo "     E: Couldn't push package '$pkg' to remote '$REMOTE' at '$REMOTE_PATH'"
            >&2 echo
            !((ERRORS++))
        else
            # If push succeeded, create an options file
            if [ "$OPTIONS" != "null" ]; then
                optsfile="$(basename "$pkg").opts"
                say 1 " - creating options file '$optsfile'"

                # If the options file creation fails, roll back
                if ! rexec "$REMOTE_PATH" "echo '$OPTIONS' > ::path::/incoming/$VISIBILITY/$optsfile"; then
                    success="false"
                    !((ERRORS++))
                    >&2 echo
                    >&2 echo "     E: Couldn't create options file for package '$pkg'. Rolling back..."
                    >&2 echo
                    rexec "$REMOTE_PATH" "rm ::path::/incoming/$VISIBILITY/$(basename "$pkg")" || true
                fi
            else
                say 2 "No options file created."
            fi
        fi

        # If we were successful, increment and optionally delete local package
        if [ "$success" == "true" ]; then
            !((PKGCNT++))
            if [ "$PRESERVE_PUSHED" != "true" ]; then
                say 1 " - deleting $pkg"
                rm "$pkg" || true
            else
                say 1 " - preserving $pkg, even though successfully pushed"
            fi
        fi

        say 1 " - done processing $pkg"
    done 10< <(echo "$PKGS")
done 9< <(config_jq -jc '.packages | keys | join("\u001e")')


# Done pushing, now update the remote and report
if [ "$PKGCNT" -gt 0 ]; then
    err=
    if [ "$ERRORS" -gt 0 ]; then
        err=" (with $ERRORS errors)"
    fi
    say 0
    say 0 "Pushed $PKGCNT packages; now calling update on remote...."

    # Now that all packages have been uploaded, update the archive
    if ! rexec -t "$REMOTE_PATH" "peekaygee-archive $v update \"::path::\""; then
        >&2 echo
        >&2 echo "E: Remote update failed. Packages may not be published."
        >&2 echo
        exit 30
    else
        say 0 "Packages successfully published"
    fi
else
    if [ "$ERRORS" -gt 0 ]; then
        say 0 "Nothing pushed, although there were $ERRORS errors"
    else
        say 0 "Nothing pushed; all done"
    fi
fi

